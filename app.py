from flask import Flask, render_template, redirect, request, url_for, send_file, session, Response, jsonify
import mysql.connector, base64
from flask_mail import Mail, Message

app = Flask(__name__)
app.secret_key = 'shoping' 

# Flask-Mail configuration
app.config['MAIL_SERVER'] = 'smtp.gmail.com'  # For Gmail SMTP
app.config['MAIL_PORT'] = 465  # Or 587 for TLS
app.config['MAIL_USE_TLS'] = False  # Use TLS if you want (set to True for TLS)
app.config['MAIL_USE_SSL'] = True  # Set to True if using SSL
app.config['MAIL_USERNAME'] = "Admin"
app.config['MAIL_DEFAULT_SENDER'] = 'your_email@gmail.com'  # Default sender address
app.config['MAIL_PASSWORD'] = 'your_email_password'  # The 16-character app password generated by Google => need to do 2 step verification

# Initialize Flask-Mail
mail = Mail(app)

mydb = mysql.connector.connect(
    host="localhost",
    user="root",
    password="Rupa@31",
    port="3306",
    database='shoping'
)

mycursor = mydb.cursor()

def executionquery(query,values):
    mycursor.execute(query,values)
    mydb.commit()
    return

def retrivequery1(query,values):
    mycursor.execute(query,values)
    data = mycursor.fetchall()
    return data

def retrivequery2(query):
    mycursor.execute(query)
    data = mycursor.fetchall()
    return data


@app.route('/')
def index():
    return render_template('index.html')

@app.route('/about')
def about():
    return render_template('about.html')


##################################################################################################
######################################### ADMIN PANEL ############################################
##################################################################################################

@app.route('/admin_login', methods=["GET", "POST"])
def admin_login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']

        if email == "admin@gmail.com" and password == "admin":
            return redirect("/admin_home")
        return render_template('admin/login.html', message="Invalid Credentials!!")
    return render_template('admin/login.html')


@app.route('/admin_home')
def admin_home():
    return render_template('admin/admin_home.html')


@app.route('/shop_owner_requests')
def shop_owner_requests():
    query = "SELECT * FROM shop_owners WHERE status = %s"
    values = ("pending",)
    shop_owner_data = retrivequery1(query, values)

    shop_owner_list = []
    for item in shop_owner_data:
        shop_owner_list.append({
            'id': item[0],
            'name': item[1],
            'email': item[2],
            'shop_name': item[3],
            'location': item[4],
            'mobile': item[5],
            'password': item[6],
            'status': item[7]
        })
    return render_template('admin/shop_owner_requests.html', shop_owner_data = shop_owner_list)


@app.route('/accept_shop_owner_requests/<shop_owner_id>')
def accept_shop_owner_requests(shop_owner_id):
    query = "UPDATE shop_owners SET status = %s WHERE id = %s"
    values = ("accepted", shop_owner_id)
    executionquery(query, values)

    query = "SELECT email FROM shop_owners WHERE id = %s"
    values = (shop_owner_id,)
    shop_owner_email = retrivequery1(query, values)

    recipient = shop_owner_email[0][0]
    subject = 'Registration request accepted!'
    body = 'Congruatulations! Your request for registration as an shop_owner accepted by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    return redirect("/shop_owner_requests")


@app.route('/reject_shop_owner_requests/<shop_owner_id>')
def reject_shop_owner_requests(shop_owner_id):
    query = "DELETE FROM shop_owners WHERE id = %s"
    values = (shop_owner_id,)
    executionquery(query, values)

    query = "SELECT email FROM shop_owner WHERE id = %s"
    values = (shop_owner_id,)
    shop_owner_email = retrivequery1(query, values)

    recipient = shop_owner_email[0][0]
    subject = 'Registration request rejected!'
    body = 'Your request for registration as an shop_owner rejected by admin!'

    # Create the email message
    msg = Message(subject, recipients=[recipient])
    msg.body = body  # Plain text body

    # Send the email
    try:
        mail.send(msg)
    except Exception as e:
        print(f'Error: {str(e)}')
    finally:
        return redirect("/shop_owner_requests")
    

##################################################################################################
######################################### SHOP OWNER PANEL #######################################
##################################################################################################

@app.route('/shop_owner_register', methods=["GET", "POST"])
def shop_owner_register():
    if request.method == "POST":
        name = request.form['name']
        email = request.form['email']
        shop_name = request.form['shop_name']
        location = request.form['location']
        mobile = request.form['mobile']
        password = request.form['password']
        c_password = request.form['c_password']

        if password == c_password:
            query = "SELECT email FROM shop_owners"
            exist_data = retrivequery2(query)

            exist_email_list = [i[0] for i in exist_data]

            if email not in exist_email_list:
                query = """INSERT INTO shop_owners (name, email, shop_name, location, mobile, password, status) 
                        VALUES (%s, %s, %s, %s, %s, %s, %s)"""
                values = (name, email, shop_name, location, mobile, password, "pending")
                executionquery(query, values)

                return render_template('shop_owner/login.html', message="Successfully Registered!")
            return render_template('shop_owner/register.html', message="This email ID already exists!")
        return render_template('shop_owner/register.html', message="Confirm password does not match!")
    return render_template('shop_owner/register.html')


@app.route('/shop_owner_login', methods=["GET", "POST"])
def shop_owner_login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']
        
        query = "SELECT * FROM shop_owners WHERE email = %s"
        values = (email,)
        shop_owner_data = retrivequery1(query, values)

        if shop_owner_data:
            if password == shop_owner_data[0][6]:
                if shop_owner_data[0][7] == "accepted":
                    session["shop_owner_id"] = shop_owner_data[0][0]
                    session["shop_owner_name"] = shop_owner_data[0][1]
                    session["shop_owner_email"] = shop_owner_data[0][2]
                    session["shop_owner_shop_name"] = shop_owner_data[0][3]
                    session["shop_owner_location"] = shop_owner_data[0][4]
                    session["shop_owner_mobile"] = shop_owner_data[0][5]

                    return redirect("/shop_owner_home")
                return render_template('shop_owner/login.html', message=f"Your registration request: {shop_owner_data[0][7]}")
            return render_template('shop_owner/login.html', message="Invalid Password!!")
        return render_template('shop_owner/login.html', message="This email ID does not exist!")
    return render_template('shop_owner/login.html')


@app.route('/shop_owner_home')
def shop_owner_home():
    return render_template('shop_owner/shop_owner_home.html')


@app.route('/add_products', methods = ["GET", "POST"])
def add_products():
    message = None
    if request.method == "POST":
        name = request.form["name"]
        category = request.form["category"]
        price = request.form["price"]
        description = request.form["description"]
        img = request.files["img"]
        binary_data = img.read()
        shop_owner_id = session["shop_owner_id"]

        query = "INSERT INTO products (name, category, price, description, img, shop_owner_id) VALUES (%s, %s, %s, %s, %s, %s)"
        values = (name, category, price, description, binary_data, shop_owner_id)
        executionquery(query, values)
        message = "Product added successfully!"
    return render_template('shop_owner/add_products.html', message = message)


@app.route('/manage_products', methods = ["GET", "POST"])
def manage_products():
    message = None
    if request.method == "POST":
        product_id = request.form["product_id"]
        product_name = request.form["product_name"]
        product_category = request.form["product_category"]
        product_price = request.form["product_price"]
        product_description = request.form["product_description"]
        product_img = request.files["product_img"]
        shop_owner_id = request.form["shop_owner_id"]

        
        if product_img:
            binary_data = product_img.read()
            query = "UPDATE products SET name = %s, category = %s, price = %s, description = %s, img = %s, shop_owner_id = %s WHERE id = %s"
            values = (product_name, product_category, product_price, product_description, binary_data, shop_owner_id, product_id)
        else:
            query = "UPDATE products SET name = %s, category = %s, price = %s, description = %s, shop_owner_id = %s WHERE id = %s"
            values = (product_name, product_category, product_price, product_description, shop_owner_id, product_id)
        executionquery(query, values)
        message = "Product Updated successfully!"


    shop_owner_id = session["shop_owner_id"]
    query = "SELECT * FROM products WHERE shop_owner_id = %s"
    values = (shop_owner_id,)
    products_data = retrivequery1(query, values)

    products_list = []
    for item in products_data:
        products_list.append({
            'id': item[0],
            'name': item[1],
            'category': item[2],
            'price': item[3],
            'description': item[4],
            'img': base64.b64encode(item[5]).decode('utf-8'),
            'shop_owner_id': item[6]
        })
    return render_template('shop_owner/manage_products.html', products_data=products_list, message=message)



@app.route('/delete_products/<product_id>', methods = ["GET", "POST"])
def delete_products(product_id):
    query = "DELETE FROM products WHERE id = %s"
    values = (product_id,)
    executionquery(query, values)

    shop_owner_id = session["shop_owner_id"]
    query = "SELECT * FROM products WHERE shop_owner_id = %s"
    values = (shop_owner_id,)
    products_data = retrivequery1(query, values)

    products_list = []
    for item in products_data:
        products_list.append({
            'id': item[0],
            'name': item[1],
            'category': item[2],
            'price': item[3],
            'description': item[4],
            'img': base64.b64encode(item[5]).decode('utf-8'),
            'shop_owner_id': item[6]
        })
    return render_template('shop_owner/manage_products.html', products_data=products_list, message="Product deleted successfully!")






##################################################################################################
######################################### CUSTOMER PANEL #########################################
##################################################################################################

@app.route('/customer_register', methods=["GET", "POST"])
def customer_register():
    if request.method == "POST":
        name = request.form['name']
        email = request.form['email']
        age = request.form['age']
        mobile = request.form['mobile']
        location = request.form['location']
        password = request.form['password']
        c_password = request.form['c_password']

        if password == c_password:
            query = "SELECT email FROM customers"
            exist_data = retrivequery2(query)
            exist_email_list = [i[0] for i in exist_data]

            if email not in exist_email_list:
                query = "INSERT INTO customers (name, email, age, mobile, location, password) VALUES (%s, %s, %s, %s, %s, %s)"
                values = (name, email, age, mobile, location, password)
                executionquery(query, values)

                return render_template('customer/login.html', message="Successfully Registered!")
            return render_template('customer/register.html', message="This email ID already exists!")
        return render_template('customer/register.html', message="Confirm password does not match!")
    return render_template('customer/register.html')


@app.route('/customer_login', methods=["GET", "POST"])
def customer_login():
    if request.method == "POST":
        email = request.form['email']
        password = request.form['password']
        
        query = "SELECT * FROM customers WHERE email = %s"
        values = (email,)
        customer_data = retrivequery1(query, values)

        if customer_data:
            if password == customer_data[0][6]:
                session["id"] = customer_data[0][0]
                session["name"] = customer_data[0][1]
                session["email"] = customer_data[0][2]
                session["age"] = customer_data[0][3]
                session["mobile"] = customer_data[0][4]
                session["location"] = customer_data[0][5]

                return redirect("/customer_home")
            return render_template('customer/login.html', message="Invalid Password!!")
        return render_template('customer/login.html', message="This email ID does not exist!")
    return render_template('customer/login.html')


@app.route('/customer_home')
def customer_home():
    return render_template('customer/customer_home.html')



@app.route('/view_products', methods = ["GET", "POST"])
def view_products():
    message = None
    if request.method == "POST":
        product_id = request.form["product_id"]
        product_name = request.form["product_name"]
        product_category = request.form["product_category"]
        product_price = request.form["product_price"]
        product_description = request.form["product_description"]
        product_shop_owner_id = request.form["product_shop_owner_id"]

        product_img = request.form["product_img"]
        product_img_binary = base64.b64decode(product_img)
        customer_id = session["id"]

        query = """INSERT INTO carts 
            (product_id, customer_id, product_shop_owner_id, product_name, product_category, product_price, product_description, product_img) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s)"""
        values = (product_id, customer_id, product_shop_owner_id, product_name, product_category, product_price, product_description, product_img_binary)
        executionquery(query, values)
        message = "Product added in cart!"

    query = "SELECT * FROM products"
    products_data = retrivequery2(query)

    products_list = []
    for item in products_data:
        products_list.append({
            'id': item[0],
            'name': item[1],
            'category': item[2],
            'price': item[3],
            'description': item[4],
            'img': base64.b64encode(item[5]).decode('utf-8'),
            'shop_owner_id': item[6]
        })
    return render_template('customer/view_products.html', products_data = products_list, message = message)



@app.route('/cart', methods = ["GET", "POST"])
def cart():
    message = None
    if request.method == "POST":
        cart_id = request.form["cart_id"]
        product_id = request.form["product_id"]
        customer_id = request.form["customer_id"]
        product_shop_owner_id = request.form["product_shop_owner_id"]
        product_name = request.form["product_name"]
        product_category = request.form["product_category"]
        product_price = request.form["product_price"]
        product_description = request.form["product_description"]
        debit_card_no = request.form["card_no"]
        cvv_no = request.form["cvv"]
        product_img = request.form["product_img"]
        product_img_binary = base64.b64decode(product_img)


        query = """INSERT INTO purchases 
            (product_id, customer_id, product_shop_owner_id, product_name, product_category, product_price, product_description, product_img, debit_card_no, cvv_no) 
            VALUES (%s, %s, %s, %s, %s, %s, %s, %s, %s, %s)"""
        values = (product_id, customer_id, product_shop_owner_id, product_name, product_category, product_price, product_description, product_img_binary, debit_card_no, cvv_no)
        executionquery(query, values)
        message = "Product purchased!"


    query = "SELECT * FROM carts"
    carts_data = retrivequery2(query)

    carts_list = []
    for item in carts_data:
        carts_list.append({
            'id': item[0],
            'product_id': item[1],
            'customer_id': item[2],
            'product_shop_owner_id': item[3],
            'product_name': item[4],
            'product_category': item[5],
            'product_price': item[6],
            'product_description': item[7],
            'product_img': base64.b64encode(item[8]).decode('utf-8')
        })
    return render_template('customer/view_carts.html', carts_data = carts_list, message = message)



@app.route('/remove_frm_cart/<cart_id>')
def remove_frm_cart(cart_id):
    query = "DELETE FROM carts WHERE id = %s"
    values = (cart_id,)
    executionquery(query, values)

    query = "SELECT * FROM carts"
    carts_data = retrivequery2(query)

    carts_list = []
    for item in carts_data:
        carts_list.append({
            'id': item[0],
            'product_id': item[1],
            'customer_id': item[2],
            'product_shop_owner_id': item[3],
            'product_name': item[4],
            'product_category': item[5],
            'product_price': item[6],
            'product_description': item[7],
            'product_img': base64.b64encode(item[8]).decode('utf-8')
        })
    return render_template('customer/view_carts.html', carts_data = carts_list, message = "Product removed from Cart!")





### Recommendation Part ###
from sklearn.feature_extraction.text import TfidfVectorizer
from sklearn.metrics.pairwise import cosine_similarity

@app.route('/recommendations/<product_id>', methods=["GET", "POST"])
def recommendations(product_id):
    message = None
    recommended_products = []

    # Step 1: Fetch product data
    query = "SELECT * FROM products"
    products_data = retrivequery2(query)

    products_list = []
    product_descriptions = []

    for item in products_data:
        products_list.append({
            'id': item[0],
            'name': item[1],
            'category': item[2],
            'price': item[3],
            'description': item[4],
            'img': base64.b64encode(item[5]).decode('utf-8'),
            'shop_owner_id': item[6]
        })
        product_descriptions.append(item[4])  # Assuming product description is at index 4

    # Step 2: Use TF-IDF Vectorizer to create numerical vectors from product descriptions
    tfidf = TfidfVectorizer(stop_words='english')
    tfidf_matrix = tfidf.fit_transform(product_descriptions)

    # Step 3: Calculate Cosine Similarity between products
    cosine_sim = cosine_similarity(tfidf_matrix, tfidf_matrix)

    # Step 4: Recommend similar products based on the most recently added product to the cart or viewed
    # Find the index of the selected product in the products list
    product_idx = next((i for i, product in enumerate(products_list) if product['id'] == int(product_id)), None)
    
    if product_idx is not None:
        # Get similar products based on the cosine similarity score
        sim_scores = list(enumerate(cosine_sim[product_idx]))
        sim_scores = sorted(sim_scores, key=lambda x: x[1], reverse=True)[1:4]  # Get top 3 similar products
        
        similar_product_ids = [products_list[i[0]]['id'] for i in sim_scores]
        recommended_products = [product for product in products_list if product['id'] in similar_product_ids]

    # Step 5: Render the products and recommended products to the page
    return render_template('customer/recommendations.html', products_data=products_list, recommended_products=recommended_products, message=message)







if __name__ == '__main__':
    app.run(debug = True)